/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import ImageImageImage from 'src/assets/images/AnimTest8_Image.png';
import { animated, useSpring, easings } from 'react-spring';
import useAnimTest8 from 'src/components/AnimTest8/useAnimTest8';
 
const Property1Default = animated(styled("div", {
    shouldForwardProp: prop => !["data"].includes(prop.toString())
    })(({ data }) =>({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  boxShadow: `0px 4px 9px rgba(0, 0, 0, 0.1)`,  
  borderRadius: `20px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: `532px`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `30px`,  
  boxSizing: `border-box`,  
  height: "auto",  
})));
  
const Image = animated(styled("div", {
    shouldForwardProp: prop => !["data"].includes(prop.toString())
    })(({ data }) =>({  
  backgroundImage: `url(${ImageImageImage})`,  
  backgroundPosition: `center`,  
  backgroundSize: `cover`,  
  backgroundRepeat: `no-repeat`,  
  borderRadius: `22px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  alignSelf: `stretch`,  
  width: `200px`,  
  margin: `0px`,  
})));
  
const Text = animated(styled("div", {
    shouldForwardProp: prop => !["data"].includes(prop.toString())
    })(({ data }) =>({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `228px`,  
  margin: `0px 0px 0px 44px`,  
})));
  
const TextTop = animated(styled("div", {
    shouldForwardProp: prop => !["data"].includes(prop.toString())
    })(({ data }) =>({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: data.currentVariant === 'Property1Variant2' ? "unset" : `stretch`,  
  margin: `0px`,  
  width: "unset",  
})));
  
const Category = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Inter`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  height: `18px`,  
  width: `193px`,  
  margin: `0px`,  
});
  
const LoremIpsumTestToBeSe = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Inter`,  
  fontWeight: `700`,  
  fontSize: `32px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  alignSelf: `stretch`,  
  margin: `2px 0px 0px 0px`,  
});
  
const Date = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(149, 149, 149, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Inter`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  height: `18px`,  
  width: `193px`,  
  margin: `18px 0px 0px 0px`,  
});
 
function AnimTest8(props) {
  const {data, fns} = useAnimTest8();
  
  
  const Property1DefaultProperty1Default = { width: `532px`  }
  const Property1DefaultProperty1Variant2 = { width: `836px`  }
  const [Property1DefaultStateStyles, Property1DefaultStateApi] = useSpring(() => ({ from: eval('Property1Default' + data.currentVariant), config: { duration: 1000 }, delay: 500 }))

  const ImageProperty1Default = { width: `200px`  }
  const ImageProperty1Variant2 = { width: `362px`  }
  const [ImageStateStyles, ImageStateApi] = useSpring(() => ({ from: eval('Image' + data.currentVariant), config: { duration: 1000 }, delay: 500 }))

  const TextProperty1Default = { width: `228px`  }
  const TextProperty1Variant2 = { width: `370px`  }
  const [TextStateStyles, TextStateApi] = useSpring(() => ({ from: eval('Text' + data.currentVariant), config: { duration: 1000 }, delay: 500 }))

  const TextTopProperty1Default = { width: "228px"  }
  const TextTopProperty1Variant2 = { width: `370px`  }
  const [TextTopStateStyles, TextTopStateApi] = useSpring(() => ({ from: eval('TextTop' + data.currentVariant), config: { duration: 1000 }, delay: 500 }))

  const switchStateToProperty1Default = (duration = 0, delay = 0, easing = 'linear') => {
    Property1DefaultStateApi.start({ ...Property1DefaultProperty1Default, delay, config: { duration, easing: easings[easing] } })
    ImageStateApi.start({ ...ImageProperty1Default, delay, config: { duration, easing: easings[easing] } })
    TextStateApi.start({ ...TextProperty1Default, delay, config: { duration, easing: easings[easing] } })
    TextTopStateApi.start({ ...TextTopProperty1Default, delay, config: { duration, easing: easings[easing] } })
  };

  const switchStateToProperty1Variant2 = (duration = 0, delay = 0, easing = 'linear') => {
    Property1DefaultStateApi.start({ ...Property1DefaultProperty1Variant2, delay, config: { duration, easing: easings[easing] } })
    ImageStateApi.start({ ...ImageProperty1Variant2, delay, config: { duration, easing: easings[easing] } })
    TextStateApi.start({ ...TextProperty1Variant2, delay, config: { duration, easing: easings[easing] } })
    TextTopStateApi.start({ ...TextTopProperty1Variant2, delay, config: { duration, easing: easings[easing] } })
  };
  return (
    <Property1Default  className={props.className}   data={data}  style={{ ...Property1DefaultStateStyles }}>
      <Image id={"12"}  data={data}  style={{ ...ImageStateStyles }}>
      </Image>
      <Text data={data}  style={{ ...TextStateStyles }}>
        <TextTop data={data}  style={{ ...TextTopStateStyles }}>
          <Category >
            {`Category`}
              </Category>
          <LoremIpsumTestToBeSe  onClick={() => {  switchStateToProperty1Variant2(750, 250, 'easeOutQuart'); fns.setCurrentVariant("Property1Variant2");  }}>
            {`Lorem ipsum test to be see and not read`}
              </LoremIpsumTestToBeSe>
        </TextTop>
        <Date >
          {`Jul 6, 2022`}
            </Date>
      </Text>
    </Property1Default>
  );
}

export default AnimTest8;
