/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import { animated, useSpring, easings } from 'react-spring';

 
const Frame281 = animated(styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: "100vw",  
  height: "100vh",  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
}));
  
const Rectangle2 = animated(styled("div")({  
  backgroundColor: `rgba(255, 0, 0, 1)`,  
  width: `286px`,  
  height: `576px`,  
  position: `absolute`,  
  left: `189px`,  
  top: `145px`,  
  overflow: "hidden",  
}));
  
const Ahahahhahahahhahahha = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Components"]["Button Large"].fontStyle,  
  fontFamily: theme.typography["Components"]["Button Large"].fontFamily,  
  fontWeight: theme.typography["Components"]["Button Large"].fontWeight,  
  fontSize: theme.typography["Components"]["Button Large"].fontSize,  
  letterSpacing: theme.typography["Components"]["Button Large"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Button Large"].textDecoration,  
  lineHeight: theme.typography["Components"]["Button Large"].lineHeight,  
  textTransform: theme.typography["Components"]["Button Large"].textTransform,  
  position: `absolute`,  
  left: `555px`,  
  top: `407px`,  
}));
 
function Frame28(props) {
  
  
  const [Frame281Spring, Frame281Api] = useSpring(() => ({
    config: {
      duration: 250,
      easing: easings['easeOutExpo']
    },
    delay: 0,
    from: { opacity: 1  },
  }));

  const [Rectangle2Spring, Rectangle2Api] = useSpring(() => ({
    config: {
      duration: 250,
      easing: easings['easeOutExpo']
    },
    delay: 0,
    from: { opacity: 1  },
  }));
  return (
    <Frame281 onClick={() => {  Frame281Api.start({ ...{ opacity: 0  }, delay: 0 });  }}  className={props.className}    style={{ ...Frame281Spring }}>
      <Rectangle2 onClick={() => {  Rectangle2Api.start({ ...{ opacity: 0  }, delay: 0 });  }}  style={{ ...Rectangle2Spring }}>
      </Rectangle2>
      <Ahahahhahahahhahahha >
        {`Ahahahhahahahhahahhaahahahahhahahahahahahhahahahahahahahaha`}
          </Ahahahhahahahhahahha>
    </Frame281>
  );
}

export default Frame28;
